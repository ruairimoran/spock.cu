{
\# TEMPLATE FILE FOR PROBLEM DATA #\
\# NUMBER OF STATES #\
"numStates": \~num_states~\,
\# NUMBER OF INPUTS #\
"numInputs": \~num_inputs~\,
\# STATE DYNAMICS #\
"stateDynamics": {
\% for i in range(state_dyn|length) %\
"\~i~\":\% if state_dyn[i] is none %\[]\% else %\\~state_dyn[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# INPUT DYNAMICS #\
"inputDynamics": {
\% for i in range(input_dyn|length) %\
"\~i~\":\% if input_dyn[i] is none %\[]\% else %\\~input_dyn[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# STATE AND INPUT DYNAMICS CONCATENATED #\
"AB": {
\% for i in range(AB_dyn|length) %\
"\~i~\":\% if AB_dyn[i] is none %\[]\% else %\\~AB_dyn[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# NONLEAF STATE COSTS #\
"nonleafStateCosts": {
\% for i in range(state_cost|length) %\
"\~i~\":\% if state_cost[i] is none %\[]\% else %\\~state_cost[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# NONLEAF INPUT COSTS #\
"nonleafInputCosts": {
\% for i in range(input_cost|length) %\
"\~i~\":\% if input_cost[i] is none %\[]\% else %\\~input_cost[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# LEAF STATE COSTS #\
"leafStateCosts": {
\% for i in range(terminal_cost|length) %\
"\~i~\":\% if terminal_cost[i] is none %\[]\% else %\\~terminal_cost[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# SQRT NONLEAF STATE COSTS #\
"sqrtNonleafStateCosts": {
\% for i in range(sqrt_state_cost|length) %\
"\~i~\":\% if sqrt_state_cost[i] is none %\[]\% else %\\~sqrt_state_cost[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# SQRT NONLEAF INPUT COSTS #\
"sqrtNonleafInputCosts": {
\% for i in range(sqrt_input_cost|length) %\
"\~i~\":\% if sqrt_input_cost[i] is none %\[]\% else %\\~sqrt_input_cost[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# SQRT LEAF STATE COSTS #\
"sqrtLeafStateCosts": {
\% for i in range(sqrt_terminal_cost|length) %\
"\~i~\":\% if sqrt_terminal_cost[i] is none %\[]\% else %\\~sqrt_terminal_cost[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# NONLEAF CONSTRAINTS #\
"nonleafConstraints": {
\% for i in range(nonleaf_constraint|length) %\
"\~i~\": {"type": \% if nonleaf_constraint[i].is_no %\
"no"\% elif nonleaf_constraint[i].is_rectangle %\
"rectangle", "lb": \~nonleaf_constraint[i].lower_bound.flatten().tolist()~\, "ub": \~nonleaf_constraint[i].upper_bound.flatten().tolist()~\\% endif %\}\% if not loop.last %\,\% endif %\

\% endfor %\},
\# LEAF CONSTRAINTS #\
"leafConstraints": {
\% for i in range(leaf_constraint|length) %\
"\~i~\": {\% if leaf_constraint[i] is none %\},\% else %\"type": \% if leaf_constraint[i].is_no %\
"no"\% elif leaf_constraint[i].is_rectangle %\
"rectangle", "lb": \~leaf_constraint[i].lower_bound.flatten().tolist()~\, "ub": \~leaf_constraint[i].upper_bound.flatten().tolist()~\\% endif %\}\% if not loop.last %\,\% endif %\\% endif %\

\% endfor %\},
\# RISKS #\
"risks": {
\% for i in range(risk|length) %\
"\~i~\": {"type": \% if risk[i].is_avar %\
"avar", "alpha": \~risk[i].alpha~\, "S2": \~ker_con[i].flatten().tolist()~\, "NNtr": \~null[i].flatten().tolist()~\, "b": \~b[i].flatten().tolist()~\\% elif risk[i].is_evar %\
"evar"\% endif %\}\% if not loop.last %\,\% endif %\

\% endfor %\},
"rowsS2": \~ker_con_rows~\,
"rowsNNtr": \~null_dim~\,
\# P #\
"P": {
\% for i in range(P|length) %\
"\~i~\":\% if P[i] is none %\[]\% else %\\~P[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# K #\
"K": {
\% for i in range(K|length) %\
"\~i~\":\% if K[i] is none %\[]\% else %\\~K[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# LOWER CHOLESKY #\
"lowerCholesky": {
\% for i in range(low_chol|length) %\
"\~i~\":\% if low_chol[i] is none %\[]\% else %\\~low_chol[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# SUM OF DYNAMICS TRANSPOSED #\
"(A+B@K)t": {
\% for i in range(dyn_tr|length) %\
"\~i~\":\% if dyn_tr[i] is none %\[]\% else %\\~dyn_tr[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# At @ P @ B #\
"At@P@B": {
\% for i in range(APB|length) %\
"\~i~\":\% if APB[i] is none %\[]\% else %\\~APB[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# DP TEST STATES #\
"dpStates": {
\% for i in range(dpTestStates|length) %\
"\~i~\":\% if dpTestStates[i] is none %\[]\% else %\\~dpTestStates[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# DP TEST INPUTS #\
"dpInputs": {
\% for i in range(dpTestInputs|length) %\
"\~i~\":\% if dpTestInputs[i] is none %\[]\% else %\\~dpTestInputs[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# DP PROJECTED STATES #\
"dpProjectedStates": {
\% for i in range(dpProjectedStates|length) %\
"\~i~\":\% if dpProjectedStates[i] is none %\[]\% else %\\~dpProjectedStates[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\},
\# DP PROJECTED INPUTS #\
"dpProjectedInputs": {
\% for i in range(dpProjectedInputs|length) %\
"\~i~\":\% if dpProjectedInputs[i] is none %\[]\% else %\\~dpProjectedInputs[i].flatten().tolist()~\\% endif %\
\% if not loop.last %\,\% endif %\

\% endfor %\}
}