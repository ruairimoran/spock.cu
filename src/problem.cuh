#include "../include/stdgpu.h"
#include <stdio.h>
#include <fstream>
#include <iostream>
#include <stdexcept>


/**
 * Store problem data
 * - from default file
 * - from user input
 *
 * Note: `d_` indicates a device pointer
 */
class ProblemData {

	private:
        bool m_isMarkovian = false;  ///< Is tree generated by a stopped Markov process?
        size_t m_numNonleafNodes = 0;  ///< Total number of nonleaf nodes (incl. root)
        DeviceVector<int> m_d_stages;  ///< Ptr to stage of node at index

	public:
		/**
		 * Constructor from default JSON file stream
		 */
		ProblemData(std::ifstream& file) {
            std::string json((std::istreambuf_iterator<char>(file)),
                              std::istreambuf_iterator<char>());
            rapidjson::Document doc;
            doc.Parse(json.c_str());

            if (doc.HasParseError()) {
              std::cerr << "Error parsing JSON: " << GetParseError_En(doc.GetParseError()) << std::endl;
              throw std::invalid_argument("Cannot parse JSON file");
            }

            /** Store single element data from JSON in host memory */
            m_isMarkovian = doc["isMarkovian"].GetBool();
            m_numNonleafNodes = doc["numNonleafNodes"].GetInt();

            /** Allocate memory on host for JSON data */
            // std::vector<int> hostStages(m_numNodes);

            /** Allocate memory on device */
            // m_d_stages.allocateOnDevice(m_numNodes);

            /** Store array data from JSON in host memory */
            // for (rapidjson::SizeType i = 0; i<m_numNodes; i++) {
            //     if (i < m_numNonleafNodes) {
            //         hostChildrenFrom[i] = doc["childrenFrom"][i].GetInt();
            //     }
            //     hostProbabilities[i] = doc["probabilities"][i].GetDouble();
            // }

            /** Transfer JSON array data to device */
            // m_d_stages.upload(hostStages);
        }

		/**
		 * Destructor
		 */
		~ProblemData() {}

        /**
         * Getters
         */
        bool isMarkovian() { return m_isMarkovian; }
        int numNonleafNodes() { return m_numNonleafNodes; }
        DeviceVector<int>& stages() { return m_d_stages; }

        /**
         * Debugging
         */
		// void print(){
        //     std::vector<int> hostDataIntNumNodes(m_numNodes);

		// 	std::cout << "Number of nonleaf nodes: " << m_numNonleafNodes << std::endl;

        //     m_d_stages.download(hostDataIntNumNodes);
        //     std::cout << "Stages (from device): ";
        //     for (size_t i=0; i<m_numNodes; i++) {
        //         std::cout << hostDataIntNumNodes[i] << " ";
        //     }
        //     std::cout << std::endl;
		// }
};
